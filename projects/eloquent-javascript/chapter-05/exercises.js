// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arr) {
  output = arr.reduce((prev, curr) => prev.concat(curr))
  return output;

}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, test, update, execute) {
  for (let i = val; test(i); i = update(i)) {
  execute(i)}
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for (let i = 0; i < array.length; i++) {
    if (!test(array[i])) {
      return false;
    }
  } return true;
} 

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) {
  let ltr = 0;
  let rtl = 0;
  let ttb = 0;
  for (i = 0; i < str.length; i++) {
    switch (str[i].direction) {
      case 'ltr': ltr += 1; break;
      case 'rtl': rtl += 1; break;
      case 'ttb': ttb += 1; break;
    }
  }
if (ltr > rtl && ltr > ttb) {
  return 'ltr'
} else if (rtl > ltr && rtl > ttb) {
  return 'rtl'
}
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
